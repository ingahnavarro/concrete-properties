{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "4420ea1d",
   "metadata": {},
   "source": [
    "# Moment Interaction Diagram"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "0211826c",
   "metadata": {},
   "source": [
    "This example demonstrates how to generate moment interaction diagrams. We start by importing the necessary modules."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9ca3ed27",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "from concreteproperties.material import Concrete, Steel\n",
    "from concreteproperties.stress_strain_profile import (\n",
    "    ConcreteLinear,\n",
    "    RectangularStressBlock,\n",
    "    SteelElasticPlastic,\n",
    ")\n",
    "from sectionproperties.pre.library.concrete_sections import concrete_rectangular_section\n",
    "from concreteproperties.concrete_section import ConcreteSection\n",
    "from concreteproperties.results import MomentInteractionResults"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1a829a51",
   "metadata": {},
   "source": [
    "## Assign Materials\n",
    "The materials used in this example will be 32 MPa concrete and 500 MPa steel, specified in accordance with AS 3600:2018."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d430c513",
   "metadata": {},
   "outputs": [],
   "source": [
    "concrete = Concrete(\n",
    "    name=\"32 MPa Concrete\",\n",
    "    density=2.4e-6,\n",
    "    stress_strain_profile=ConcreteLinear(elastic_modulus=30.1e3),\n",
    "    ultimate_stress_strain_profile=RectangularStressBlock(\n",
    "        compressive_strength=32,\n",
    "        alpha=0.802,\n",
    "        gamma=0.89,\n",
    "        ultimate_strain=0.003,\n",
    "    ),\n",
    "    alpha_squash=0.85,\n",
    "    flexural_tensile_strength=3.4,\n",
    "    colour=\"lightgrey\",\n",
    ")\n",
    "\n",
    "steel = Steel(\n",
    "    name=\"500 MPa Steel\",\n",
    "    density=7.85e-6,\n",
    "    stress_strain_profile=SteelElasticPlastic(\n",
    "        yield_strength=500,\n",
    "        elastic_modulus=200e3,\n",
    "        fracture_strain=0.05,\n",
    "    ),\n",
    "    colour=\"grey\",\n",
    ")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "4f4b3793",
   "metadata": {},
   "source": [
    "## Create Geometry and Concrete Section\n",
    "The geometry used in this example is identical to that used in [Calculating Area Properties](area_properties.ipynb#Create-Geometry-and-Concrete-Section)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "bfbec14b",
   "metadata": {},
   "outputs": [],
   "source": [
    "geom = concrete_rectangular_section(\n",
    "    b=400,\n",
    "    d=600,\n",
    "    dia_top=20,\n",
    "    n_top=3,\n",
    "    dia_bot=24,\n",
    "    n_bot=3,\n",
    "    n_circle=4,\n",
    "    cover=30,\n",
    "    area_top=310,\n",
    "    area_bot=450,\n",
    "    conc_mat=concrete,\n",
    "    steel_mat=steel,\n",
    ")\n",
    "\n",
    "conc_sec = ConcreteSection(geom)\n",
    "conc_sec.plot_section()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "d395b6f9",
   "metadata": {},
   "source": [
    "## Moment Interaction Diagram\n",
    "We perform a moment interaction analysis by calling the ``moment_interaction_diagram()`` method."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "dd06d8c6",
   "metadata": {},
   "outputs": [],
   "source": [
    "mi_res = conc_sec.moment_interaction_diagram()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "64465ba4",
   "metadata": {},
   "source": [
    "We can plot the moment interaction diagram by calling the ``plot_diagram()`` method."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "058eae90",
   "metadata": {},
   "outputs": [],
   "source": [
    "mi_res.plot_diagram()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "21075090",
   "metadata": {},
   "source": [
    "What if we were interested in bending about the ``y`` axis? In this case the neutral axis angle would be $\\theta = \\pi / 2$. Let's generate a moment interaction diagram for this case."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "58850826",
   "metadata": {},
   "outputs": [],
   "source": [
    "mi_res = conc_sec.moment_interaction_diagram(theta=np.pi / 2)\n",
    "mi_res.plot_diagram()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "670cb44c",
   "metadata": {},
   "source": [
    "It's also possible to plot a diagram for positive and negative bending (sagging and hogging). We do this by setting the parameter ``m_neg=True``. We can control the number of points between the pure bending point and decompression point by modifying the parameter ``n_points``."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d7d9611f",
   "metadata": {},
   "outputs": [],
   "source": [
    "mi_res = conc_sec.moment_interaction_diagram(m_neg=True, n_points=48)\n",
    "mi_res.plot_diagram(fmt=\"-\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b8436e9d",
   "metadata": {},
   "source": [
    "In the above plot the bending capacity is higher for positive bending and not symmetric. This is because the bottom bars (3N24) provide more area than the top bars (3N20)."
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1f416faf",
   "metadata": {},
   "source": [
    "## Plotting Multiple Diagrams\n",
    "We can also plot multiple diagrams at once by using the ``MomentInteractionResults.plot_multiple_diagrams()`` class method. In this example we'll create four different reinforced concrete cross-sections with different reinforcement ratios."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "4d721c59",
   "metadata": {},
   "outputs": [],
   "source": [
    "# create lists to hold results and labels\n",
    "mi_results = []\n",
    "labels = []\n",
    "\n",
    "# create four different sections with increasing reinforcement\n",
    "# and peform a moment interaction analysis\n",
    "for idx in range(4):\n",
    "    geom = concrete_rectangular_section(\n",
    "        b=400,\n",
    "        d=600,\n",
    "        dia_top=16,\n",
    "        n_top=6,\n",
    "        dia_bot=16,\n",
    "        n_bot=6,\n",
    "        n_circle=4,\n",
    "        cover=66,\n",
    "        area_top=200 * (idx + 1),\n",
    "        area_bot=200 * (idx + 1),\n",
    "        conc_mat=concrete,\n",
    "        steel_mat=steel,\n",
    "    )\n",
    "\n",
    "    conc_sec = ConcreteSection(geom)\n",
    "    mi_results.append(conc_sec.moment_interaction_diagram())\n",
    "    labels.append(\"p = {0}\".format(0.01 * (idx + 1)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ed7d7aaa",
   "metadata": {},
   "outputs": [],
   "source": [
    "# plot all the diagrams on one image\n",
    "MomentInteractionResults.plot_multiple_diagrams(\n",
    "    moment_interaction_results=mi_results, labels=labels, fmt=\"-\"\n",
    ")"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
